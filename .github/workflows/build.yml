name: Build Tracker Agent

on:
  push:
    branches: [ main ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        platform:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            name: linux-x86_64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            name: windows-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            name: macos-aarch64
          - os: macos-13  # Intel Mac pro x86_64 build
            target: x86_64-apple-darwin
            name: macos-x86_64

    runs-on: ${{ matrix.platform.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: tracker-agent-app/package-lock.json

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform.target }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: tracker-agent-app/src-tauri

      - name: Install dependencies (Ubuntu)
        if: startsWith(matrix.platform.os, 'ubuntu')
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libgtk-3-dev \
            libwebkit2gtk-4.1-dev \
            libappindicator3-dev \
            librsvg2-dev \
            patchelf \
            libx11-dev \
            libxcb1-dev \
            libxcb-render0-dev \
            libxcb-shape0-dev \
            libxcb-xfixes0-dev \
            libpipewire-0.3-dev \
            libgbm-dev \
            tesseract-ocr \
            tesseract-ocr-eng \
            libtesseract-dev \
            libleptonica-dev

      - name: Install dependencies (macOS)
        if: startsWith(matrix.platform.os, 'macos')
        run: |
          brew install tesseract tesseract-lang

      - name: Install dependencies (Windows)
        if: startsWith(matrix.platform.os, 'windows')
        shell: powershell
        run: |
          # Stáhnout a nainstalovat Tesseract z UB Mannheim
          $tesseractUrl = "https://digi.bib.uni-mannheim.de/tesseract/tesseract-ocr-w64-setup-5.3.3.20231005.exe"
          $installerPath = "$env:TEMP\tesseract-installer.exe"

          Write-Host "Downloading Tesseract..."
          Invoke-WebRequest -Uri $tesseractUrl -OutFile $installerPath

          Write-Host "Installing Tesseract..."
          Start-Process -FilePath $installerPath -ArgumentList "/S", "/D=C:\Program Files\Tesseract-OCR" -Wait

          # Přidat do PATH
          echo "C:\Program Files\Tesseract-OCR" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

          # Nastavit environment variables pro build
          echo "TESSERACT_INCLUDE_PATH=C:\Program Files\Tesseract-OCR\include" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "TESSERACT_LINK_PATHS=C:\Program Files\Tesseract-OCR\lib" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "TESSERACT_LINK_LIBS=tesseract53" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "LEPTONICA_INCLUDE_PATH=C:\Program Files\Tesseract-OCR\include\leptonica" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "LEPTONICA_LINK_PATHS=C:\Program Files\Tesseract-OCR\lib" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          echo "LEPTONICA_LINK_LIBS=leptonica-1.83.0" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Install frontend dependencies
        working-directory: tracker-agent-app
        run: npm ci

      - name: Build application
        working-directory: tracker-agent-app
        run: npm run tauri build -- --target ${{ matrix.platform.target }}

      - name: Upload artifacts (Linux)
        if: startsWith(matrix.platform.os, 'ubuntu')
        uses: actions/upload-artifact@v4
        with:
          name: tracker-agent-${{ matrix.platform.name }}
          path: |
            tracker-agent-app/src-tauri/target/${{ matrix.platform.target }}/release/bundle/deb/*.deb
            tracker-agent-app/src-tauri/target/${{ matrix.platform.target }}/release/bundle/appimage/*.AppImage

      - name: Upload artifacts (Windows)
        if: startsWith(matrix.platform.os, 'windows')
        uses: actions/upload-artifact@v4
        with:
          name: tracker-agent-${{ matrix.platform.name }}
          path: |
            tracker-agent-app/src-tauri/target/${{ matrix.platform.target }}/release/bundle/msi/*.msi
            tracker-agent-app/src-tauri/target/${{ matrix.platform.target }}/release/bundle/nsis/*.exe

      - name: Upload artifacts (macOS)
        if: startsWith(matrix.platform.os, 'macos')
        uses: actions/upload-artifact@v4
        with:
          name: tracker-agent-${{ matrix.platform.name }}
          path: |
            tracker-agent-app/src-tauri/target/${{ matrix.platform.target }}/release/bundle/macos/*.app
            tracker-agent-app/src-tauri/target/${{ matrix.platform.target }}/release/bundle/dmg/*.dmg

  release:
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: artifacts/**/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

