use crate::freelo::FreeloTask;
use serde::{Deserialize, Serialize};
use tracing::info;

#[derive(Debug, Serialize)]
struct OpenRouterRequest {
    model: String,
    messages: Vec<Message>,
    temperature: f32,
    max_tokens: u32,
}

#[derive(Debug, Serialize, Deserialize)]
struct Message {
    role: String,
    content: String,
}

#[derive(Debug, Deserialize)]
struct OpenRouterResponse {
    choices: Vec<Choice>,
}

#[derive(Debug, Deserialize)]
struct Choice {
    message: Message,
}

#[derive(Debug, Deserialize)]
pub struct AIMatchResult {
    pub task_id: Option<i32>,
    pub confidence: f32,
    pub reasoning: String,
    pub activity_description: String, // Kr√°tk√Ω popis co u≈æivatel dƒõl√°
}

/// Pou≈æije AI (OpenRouter) pro matching OCR textu s Freelo tasky
pub async fn match_task_with_ai(
    ocr_text: &str,
    tasks: &[FreeloTask],
    api_key: &str,
) -> Result<AIMatchResult, String> {
    info!("ü§ñ AI Matching: Pos√≠l√°m OCR text do OpenRouter...");
    
    // P≈ôiprav seznam task≈Ø pro AI
    let tasks_list: Vec<String> = tasks
        .iter()
        .map(|t| {
            format!(
                "ID: {}, N√°zev: {}, Projekt: {}",
                t.id,
                t.name,
                t.project_name
            )
        })
        .collect();
    
    let tasks_text = tasks_list.join("\n");
    
    // Vytvo≈ô prompt pro AI
    let prompt = format!(
        r#"Analyzuj n√°sleduj√≠c√≠ OCR text z obrazovky u≈æivatele a vyber nejlep≈°√≠ matching Freelo task.

OCR TEXT (co u≈æivatel vid√≠ na obrazovce):
```
{}
```

DOSTUPN√â FREELO TASKY:
```
{}
```

INSTRUKCE:
1. Analyzuj OCR text a zjisti co u≈æivatel pr√°vƒõ dƒõl√°
2. Vyber task kter√Ω nejl√©pe odpov√≠d√° t√©to aktivitƒõ
3. Pokud ≈æ√°dn√Ω task neodpov√≠d√° dob≈ôe, vra≈• task_id: null
4. Confidence je 0-100 (jak moc si jsi jist√Ω)
5. V≈ΩDY napi≈° kr√°tk√Ω popis aktivity (max 100 znak≈Ø) do activity_description

Odpovƒõz POUZE v tomto JSON form√°tu (bez markdown blok≈Ø):
{{
  "task_id": 123,
  "confidence": 85,
  "reasoning": "U≈æivatel pracuje na...",
  "activity_description": "Editace k√≥du v tracker-agent-app"
}}

Nebo pokud ≈æ√°dn√Ω task neodpov√≠d√°:
{{
  "task_id": null,
  "confidence": 0,
  "reasoning": "≈Ω√°dn√Ω task neodpov√≠d√° aktivitƒõ...",
  "activity_description": "Prohl√≠≈æen√≠ dokumentace na webu"
}}"#,
        ocr_text.chars().take(3000).collect::<String>(), // Limit na 3000 znak≈Ø
        tasks_text
    );
    
    // Vytvo≈ô request pro OpenRouter
    let request = OpenRouterRequest {
        model: "google/gemini-2.5-flash".to_string(), // Gemini 2.0 Flash (free tier)
        messages: vec![Message {
            role: "user".to_string(),
            content: prompt,
        }],
        temperature: 0.3,
        max_tokens: 500,
    };
    
    // Po≈°li request
    let client = reqwest::Client::new();
    let response = client
        .post("https://openrouter.ai/api/v1/chat/completions")
        .header("Authorization", format!("Bearer {}", api_key))
        .header("Content-Type", "application/json")
        .json(&request)
        .send()
        .await
        .map_err(|e| format!("OpenRouter request failed: {}", e))?;
    
    if !response.status().is_success() {
        let status = response.status();
        let error_text = response.text().await.unwrap_or_default();
        return Err(format!("OpenRouter API error {}: {}", status, error_text));
    }
    
    let openrouter_response: OpenRouterResponse = response
        .json()
        .await
        .map_err(|e| format!("Failed to parse OpenRouter response: {}", e))?;
    
    // Extrahuj AI odpovƒõƒè
    let ai_response = openrouter_response
        .choices
        .first()
        .ok_or("No choices in OpenRouter response")?
        .message
        .content
        .clone();

    info!("ü§ñ AI odpovƒõƒè: {}", ai_response);

    // Odstra≈à markdown code bloky pokud jsou p≈ô√≠tomn√©
    let json_str = ai_response
        .trim()
        .strip_prefix("```json")
        .unwrap_or(&ai_response)
        .strip_suffix("```")
        .unwrap_or(&ai_response)
        .trim();

    // Parse JSON odpovƒõƒè
    let result: AIMatchResult = serde_json::from_str(json_str)
        .map_err(|e| format!("Failed to parse AI JSON response: {}. Response was: {}", e, json_str))?;
    
    info!(
        "‚úÖ AI Match: task_id={:?}, confidence={}%, reasoning={}",
        result.task_id, result.confidence, result.reasoning
    );
    
    Ok(result)
}

